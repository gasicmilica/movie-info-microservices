api:

  common:
    version: 1.0.0
    title: Sample API
    description: Description of the API...
    termsOfServiceUrl: MINE TERMS OF SERVICE URL
    license: License
    licenseUrl: MY LICENSE URL

    contact:
      name: Contact
      url: My
      email: me@mail.com

  movie-composite:

    get-composite-movie:
      description: Returns a composite view of the specified movie id
      notes: |
        # Normal response
        If the requested product id is found the method will return information regarding:
        1. Movie information
        1. Ratings
        1. Comments
        1. Screenings
        1. Service Addresses
        (technical information regarding the addresses of the microservices that created the response)

        # Expected partial and error responses
        1. If no movie information is found, a <b>404 - Not Found</b> error will be returned
        1. In no ratings, comments or screenings are found for a movie, a partial response will be returned

    create-composite-movie:
      description: Creates a composite movie
      notes: |
        # Normal response
        The composite product information posted to the API will be splitted up and stored as separate product-info, recommendation and review entities.

        # Expected error responses
        1. If a movie with the same movieId as specified in the posted information already exists,
           an <b>422 - Unprocessable Entity</b> error with a "duplicate key" error message will be returned

    delete-composite-movie:
      description: Deletes a movie composite
      notes: |
        # Normal response
        Entities for movie information, recommendations and reviews related to the specificed movieId will be deleted.
        The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.
        This means that a delete request of a non existing product will return <b>200 Ok</b>.


server.port: 7000
server.error.include-message: always

app:
  movie-service:
    host: localhost
    port: 7001
  comment-service:
    host: localhost
    port: 7002
  rating-service:
    host: localhost
    port: 7003
  screening-service:
    host: localhost
    port: 7004

spring.cloud.stream:
  defaultBinder: rabbit
  default.contentType: application/json
  bindings:
    output-movies:
      destination: movies
      producer:
        required-groups: auditGroup
    output-comments:
      destination: comments
      producer:
        required-groups: auditGroup
    output-ratings:
      destination: ratings
      producer:
        required-groups: auditGroup
    output-screenings:
      destination: screenings
      producer:
        required-groups: auditGroup

spring.cloud.stream.kafka.binder:
  brokers: 127.0.0.1
  defaultBrokerPort: 9092

spring.rabbitmq:
  host: 127.0.0.1
  port: 5672
  username: guest
  password: guest

logging:
  level:
    root: INFO
    se.magnus: DEBUG

management.endpoint.health.show-details: "ALWAYS"
management.endpoints.web.exposure.include: "*"
---
spring.profiles: docker

server.port: 8080

app:
  movie-service:
    host: movie
    port: 8080
  rating-service:
    host: rating
    port: 8080
  comment-service:
    host: comment
    port: 8080
  screening-service:
    host: screening
    port: 8080

spring.rabbitmq.host: rabbitmq

spring.cloud.stream.kafka.binder.brokers: kafka