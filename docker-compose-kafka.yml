version: '2.1'

services:
  movie:
    build: microservices/movie-service
    mem_limit: 350m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0,kafka
#      - MANAGEMENT_HEALTH_RABBIT_ENABLED=false
#      - SPRING_CLOUD_STREAM_DEFAULTBINDER=kafka
#      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_PARTITIONED=true
#      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCECOUNT=2
#      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCEINDEX=0
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      - kafka
      - mongodb

  movie-p1:
    build: microservices/movie-service
    mem_limit: 350m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1,kafka
#      - MANAGEMENT_HEALTH_RABBIT_ENABLED=false
#      - SPRING_CLOUD_STREAM_DEFAULTBINDER=kafka
#      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_PARTITIONED=true
#      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCECOUNT=2
#      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCEINDEX=1
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      - kafka
      - mongodb

  comment:
    build: microservices/comment-service
    mem_limit: 350m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0,kafka
      #      - MANAGEMENT_HEALTH_RABBIT_ENABLED=false
#      - SPRING_CLOUD_STREAM_DEFAULTBINDER=kafka
#      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_PARTITIONED=true
#      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCECOUNT=2
#      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCEINDEX=0
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      - kafka
      - mongodb

  comment-p:
    build: microservices/comment-service
    mem_limit: 350m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1,kafka
#      - MANAGEMENT_HEALTH_RABBIT_ENABLED=false
#      - SPRING_CLOUD_STREAM_DEFAULTBINDER=kafka
#      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_PARTITIONED=true
#      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCECOUNT=2
#      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCEINDEX=1
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      - kafka
      - mongodb

  rating:
    build: microservices/rating-service
    mem_limit: 350m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0,kafka
      #      - MANAGEMENT_HEALTH_RABBIT_ENABLED=false
#      - SPRING_CLOUD_STREAM_DEFAULTBINDER=kafka
#      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_PARTITIONED=true
#      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCECOUNT=2
#      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCEINDEX=0
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      - kafka
      - mongodb

  rating-p1:
    build: microservices/rating-service
    mem_limit: 350m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1,kafka
      #      - MANAGEMENT_HEALTH_RABBIT_ENABLED=false
#      - SPRING_CLOUD_STREAM_DEFAULTBINDER=kafka
#      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_PARTITIONED=true
#      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCECOUNT=2
#      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCEINDEX=1
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      - kafka
      - mongodb

  screening:
    build: microservices/screening-service
    mem_limit: 350m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0,kafka
      #      - MANAGEMENT_HEALTH_RABBIT_ENABLED=false
#      - SPRING_CLOUD_STREAM_DEFAULTBINDER=kafka
#      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_PARTITIONED=true
#      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCECOUNT=2
#      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCEINDEX=0
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_started

  screening-p1:
    build: microservices/screening-service
    mem_limit: 350m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1,kafka
#      - MANAGEMENT_HEALTH_RABBIT_ENABLED=false
#      - SPRING_CLOUD_STREAM_DEFAULTBINDER=kafka
#      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_PARTITIONED=true
#      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCECOUNT=2
#      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCEINDEX=1
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_started

  movie-composite:
    build: microservices/movie-composite-service
    mem_limit: 350m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,kafka
      #      - MANAGEMENT_HEALTH_RABBIT_ENABLED=false
#      - SPRING_CLOUD_STREAM_DEFAULTBINDER=kafka
#      - SPRING_CLOUD_STREAM_BINDINGS_OUTPUT-MOVIES_PRODUCER_PARTITION-KEY-EXPRESSION=payload.key
#      - SPRING_CLOUD_STREAM_BINDINGS_OUTPUT-MOVIES_PRODUCER_PARTITION-COUNT=2
#      - SPRING_CLOUD_STREAM_BINDINGS_OUTPUT-COMMENTS_PRODUCER_PARTITION-KEY-EXPRESSION=payload.key
#      - SPRING_CLOUD_STREAM_BINDINGS_OUTPUT-COMMENTS_PRODUCER_PARTITION-COUNT=2
#      - SPRING_CLOUD_STREAM_BINDINGS_OUTPUT-RATINGS_PRODUCER_PARTITION-KEY-EXPRESSION=payload.key
#      - SPRING_CLOUD_STREAM_BINDINGS_OUTPUT-RATINGS_PRODUCER_PARTITION-COUNT=2
#      - SPRING_CLOUD_STREAM_BINDINGS_OUTPUT-SCREENINGS_PRODUCER_PARTITION-KEY-EXPRESSION=payload.key
#      - SPRING_CLOUD_STREAM_BINDINGS_OUTPUT-SCREENINGS_PRODUCER_PARTITION-COUNT=2
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      - kafka

  eureka:
    build: spring-cloud/eureka-server
    mem_limit: 350m

  gateway:
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    build: spring-cloud/gateway
    mem_limit: 350m
    ports:
      - "8443:8443"

  auth-server:
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    build: spring-cloud/authorization-server
    mem_limit: 350m

  config-server:
    environment:
      - SPRING_PROFILES_ACTIVE=docker,native
      - ENCRYPT_KEY=${CONFIG_SERVER_ENCRYPT_KEY}
      - SPRING_SECURITY_USER_NAME=${CONFIG_SERVER_USR}
      - SPRING_SECURITY_USER_PASSWORD=${CONFIG_SERVER_PWD}
    volumes:
      - $PWD/config-repo:/config-repo
    build: spring-cloud/config-server
    mem_limit: 350m

  # $ mongo
  mongodb:
    image: mongo:3.6.9
    mem_limit: 350m
    ports:
      - "27017:27017"
    command: mongod --smallfiles

  # $ mysql -uroot -h127.0.0.1 -p
  mysql:
    image: mysql:5.7
    mem_limit: 350m
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=rootpwd
      - MYSQL_DATABASE=screening-db
      - MYSQL_USER=user
      - MYSQL_PASSWORD=pwd
    healthcheck:
      test: "/usr/bin/mysql --user=user --password=pwd --execute \"SHOW DATABASES;\""
      interval: 10s
      timeout: 5s
      retries: 10

  kafka:
    image: wurstmeister/kafka:2.12-2.1.0
    mem_limit: 350m
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    depends_on:
      - zookeeper

  zookeeper:
    image: zookeeper:3.9.2
    mem_limit: 350m
    ports:
      - "2181:2181"
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=zookeeper